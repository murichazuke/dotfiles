- hosts: all
  vars:
    X_APT_CACHE_VALID_TIME: "{{ 60 * 60 * 24 }}"
    X_OPENSSH_KEYPAIR_PATH: "{{ ansible_user_dir }}/.ssh/{{ ansible_user_id }}-{{ ansible_hostname }}"
    X_AWS_CLI_UPDATE: no
    X_AWS_SAM_CLI_UPDATE: no
    X_SOPS_VERSION: 3.7.2
    X_GO_VERSION: 1.18.1
    X_GH_VERSION: 2.17.0
    X_JP_VERSION: 0.2.1
    X_BUILDG_VERSION: 0.4.1
    X_DEADSNAKES_CODENAME_MAPPING:
      # see: https://askubuntu.com/a/445496
      bullseye: jammy
      bookworm: jammy
    X_PPA_CODENAME_MAPPING:
      # see: https://askubuntu.com/a/445496
      squeeze: lucid
      wheezy: precise
      jessie: trusty
      stretch: xenial
      buster: bionic
      bullseye: focal
      bookworm: jammy
  tasks:
    - assert:
        that:
          ansible_user_id != "root"
        fail_msg: Do not run this playbook as root

    - name: Setup apt repositories
      block:
        - name: Install prerequisites
          apt:
            name:
              - ca-certificates
              - apt-transport-https
              - gnupg
              - software-properties-common
            state: latest
            autoclean: yes
            autoremove: yes
            install_recommends: no
            cache_valid_time: "{{ X_APT_CACHE_VALID_TIME }}"
            update_cache: yes

        - name: Add a package sigining key
          shell:
            cmd: "curl -fsSL {{ item.src }} | gpg --dearmor | sudo tee '{{ item.dest }}' >/dev/null"
            creates: "{{ item.dest }}"
          with_items:
            - src: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
              dest: /usr/share/keyrings/nodesource.gpg

        - apt_key:
            url: "{{ item }}"
          with_items:
            - https://apt.releases.hashicorp.com/gpg
            - https://pkg.wslutiliti.es/public.key
            - https://aquasecurity.github.io/trivy-repo/deb/public.key
            - https://packages.adoptium.net/artifactory/api/gpg/key/public

        - apt_repository:
            repo: "{{ item }}"
          with_items:
            - "deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_lsb.codename }} main"
            - "deb [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_16.x {{ ansible_lsb.codename }} main"
            - "deb-src [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_16.x {{ ansible_lsb.codename }} main"
            - "deb https://pkg.wslutiliti.es/debian {{ ansible_lsb.codename }} main"
            - "deb https://aquasecurity.github.io/trivy-repo/deb {{ ansible_lsb.codename }} main"
            - "deb https://packages.adoptium.net/artifactory/deb {{ ansible_lsb.codename }} main"

        - apt_repository:
            repo: "ppa:deadsnakes/ppa"
            codename: "{{ X_DEADSNAKES_CODENAME_MAPPING[ansible_lsb.codename] }}"
            state: absent

        - apt_repository:
            repo: "{{ item }}"
            codename: "{{ X_PPA_CODENAME_MAPPING[ansible_lsb.codename] }}"
          with_items: []
      tags:
        - setup-apt-repositories
      become: yes

    - name: Install APT packages
      block:
        - name: apt-cache update
          apt:
            install_recommends: no
            cache_valid_time: "{{ X_APT_CACHE_VALID_TIME }}"
            update_cache: yes

        - name: apt-get install
          apt:
            name:
              - bash-completion
              - bind9-dnsutils
              - build-essential
              - bundler
              - byobu
              - curl
              - default-mysql-client
              - dwdiff
              - ffmpeg
              - ghostscript
              - git
              - gpg-agent
              - imagemagick
              - info
              - jq
              - jsonnet
              - keychain
              - ldap-utils
              - libmariadb-dev
              - man
              - ncdu
              - nodejs
              - python3-dev
              - python3-venv
              - redis-tools
              - ruby
              - ruby-dev
              - telnet
              - temurin-8-jdk
              - terraform
              - tree
              - trivy
              - unzip
              - vim
              - wslu
              - zip
            state: latest
            autoclean: yes
            autoremove: yes
            install_recommends: no
            update_cache: no
          tags:
            - apt-get-install

        - name: apt-get upgrade
          apt:
            upgrade: full
            autoclean: yes
            autoremove: yes
            install_recommends: no
            update_cache: no

        - name: Install deb packages
          apt:
            deb: "{{ item }}"
          with_items:
            - "https://github.com/mozilla/sops/releases/download/v{{ X_SOPS_VERSION }}/sops_{{ X_SOPS_VERSION }}_amd64.deb"
            - "https://github.com/cli/cli/releases/download/v{{ X_GH_VERSION }}/gh_{{ X_GH_VERSION }}_linux_amd64.deb"
            # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html#ecs-exec-prerequisites
            - "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb"
      become: yes

    - name: Install AWS CLI v2
      block:
        - name: Download and extract AWS CLI v2
          unarchive:  # this creates /usr/local/src/aws
            src: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
            dest: /usr/local/src
            remote_src: yes

        - name: Install AWS CLI v2
          command:
            cmd: /usr/local/src/aws/install --install-dir /opt/aws-cli
            creates: /usr/local/bin/aws

        - name: Update AWS CLI v2
          command:
            cmd: /usr/local/src/aws/install --install-dir /opt/aws-cli
          when: X_AWS_CLI_UPDATE
      become: yes

    - name: Install SAM CLI
      block:
        - name: Make a directory to which SAM CLI is to be extracted
          file:
            state: directory
            mode: '0755'
            path: /usr/local/src/aws-sam-cli

        - name: Download and extract AWS SAM CLI
          unarchive:
            src: https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
            dest: /usr/local/src/aws-sam-cli
            remote_src: yes

        - name: Install AWS SAM CLI
          command:
            cmd: /usr/local/src/aws-sam-cli/install --install-dir /opt/aws-sam-cli
            creates: /usr/local/bin/sam

        - name: Update AWS SAM CLI
          command:
            cmd: /usr/local/src/aws-sam-cli/install --install-dir /opt/aws-sam-cli
          when: X_AWS_SAM_CLI_UPDATE
      become: yes

    - name: Install act
      block:
        - name: Make a directory to extract an archive
          file:
            state: directory
            mode: '0755'
            path: /opt/act

        - name: Download and extract the archive
          unarchive:
            src: https://github.com/nektos/act/releases/download/v0.2.26/act_Linux_x86_64.tar.gz
            dest: /opt/act
            owner: root
            group: root
            remote_src: yes

        - name: Link the executable
          file:
            src: /opt/act/act
            dest: /usr/local/bin/act
            state: link

      become: yes
      tags: test

    - name: Install Golang
      block:
        - name: Make a directory to which golang is to be extracted
          file:
            state: directory
            mode: '0755'
            path: "{{ x_go_dir }}"

        - name: Download and extract Golang
          unarchive:
            src: "https://go.dev/dl/go{{ X_GO_VERSION }}.linux-amd64.tar.gz"
            dest: "{{ x_go_dir }}"
            remote_src: yes
            extra_opts: --strip-components=1
      vars:
        x_go_dir: "/opt/go-{{ X_GO_VERSION }}"
      become: yes

    - name: Install Buildg
      block:
        - name: Make a directory to which Buildg is to be extracted
          file:
            state: directory
            mode: '0755'
            path: "{{ x_install_dir }}"

        - name: Download and extract the archive
          unarchive:
            src: "https://github.com/ktock/buildg/releases/download/v{{ X_BUILDG_VERSION }}/buildg-full-v{{ X_BUILDG_VERSION }}-linux-amd64.tar.gz"
            dest: "{{ x_install_dir }}"
            remote_src: yes
            extra_opts: --strip-components=1
        - name: Create a symlink
          file:
            state: link
            src: "{{ x_install_dir }}"
            dest: "{{ x_path_dir }}"
      vars:
        x_install_dir: "/opt/buildg-{{ X_BUILDG_VERSION }}"
        x_path_dir: "/opt/buildg"
      tags: install-buildg
      become: yes

    - name: Install Poetry
      block:
        - name: Install Poetry
          shell:
            cmd: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
            creates: "{{ ansible_user_dir }}/.poetry"

        - name: Ensure Poetry up-to-date
          command:
            argv:
              - "{{ ansible_user_dir }}/.poetry/bin/poetry"
              - self
              - update

    - name: Install Embulk
      block:
        - name: Make an installation diretory
          file:
            state: directory
            mode: '0755'
            path: "/opt/embulk"

        - name: Download and extract Golang
          get_url:
            url: "https://dl.embulk.org/embulk-latest.jar"
            dest: "/opt/embulk/embulk"
            group: root
            owner: root
            mode: '0755'

      tags:
        - install-embulk
      become: yes

    - name: Install jp
      block:
        - name: Make an installation diretory
          file:
            state: directory
            mode: '0755'
            path: "/opt/jp"

        - name: Download and extract Golang
          get_url:
            url: "https://github.com/jmespath/jp/releases/download/{{ X_JP_VERSION }}/jp-linux-amd64"
            dest: "/opt/jp/jp"
            group: root
            owner: root
            mode: '0755'

      tags:
        - install-jp
      become: yes

    - community.crypto.openssh_keypair:
        path: "{{ X_OPENSSH_KEYPAIR_PATH }}"
        type: ed25519
        comment: "{{ ansible_user_id }}@{{ ansible_hostname }}"
      when: no

    - blockinfile:
        path: "{{ ansible_user_dir }}/.ssh/config"
        mode: "0644"
        create: yes
        block: |
          ServerAliveInterval 10

    - blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        create: no
        block: |
          . {{ playbook_dir}}/.bashrc

    - blockinfile:
        path: "{{ ansible_user_dir }}/.vimrc"
        create: yes
        marker: '" {mark} ANSIBLE MANAGED BLOCK'
        block: |
          source {{ playbook_dir}}/.vimrc

    - git:
        repo: https://github.com/kristijanhusak/vim-packager
        dest: "{{ ansible_user_dir }}/.vim/pack/packager/opt/vim-packager"

