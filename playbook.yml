- hosts: all
  vars:
    X_IS_WSL: "{{ 'wsl' in lookup('file', '/proc/sys/kernel/osrelease').lower() }}"
    X_APT_CACHE_VALID_TIME: "{{ 60 * 60 * 24 }}"
    X_OPENSSH_KEYPAIR_PATH: "{{ ansible_user_dir }}/.ssh/{{ ansible_user_id }}-{{ ansible_hostname }}"
    X_AWS_CLI_UPDATE: no
    X_AWS_SAM_CLI_UPDATE: no
    X_ACT_VERSION: 0.2.57
    X_SOPS_VERSION: 3.7.2
    X_GO_VERSION: 1.21.6
    X_GH_VERSION: 2.17.0
    X_JP_VERSION: 0.2.1
    X_NODEJS_VERSION: 20.11.0
    X_BUILDG_VERSION: 0.4.1
    X_TERRAFORM_VERSION: 1.7.1
    X_ISA_MAP:
      AMD_ARM:
        x86_64: amd64
        aarch64: arm64
      AMD_AARCH:
        x86_64: amd64
        aarch64: aarch64
      X86_ARM:
        x86_64: x86_64
        aarch64: arm64
      X86_AARCH:
        x86_64: x86_64
        aarch64: aarch64
      X64_ARM:
        x86_64: x64
        aarch64: arm64
      X64_AARCH:
        x86_64: x64
        aarch64: aarch64
      SSM:
        x86_64: 64bit
        aarch64: arm64
    X_ISA:
      AMD_ARM: "{{ X_ISA_MAP.AMD_ARM[ansible_architecture] }}"
      AMD_AARCH: "{{ X_ISA_MAP.AMD_AARCH[ansible_architecture] }}"
      X86_ARM: "{{ X_ISA_MAP.X86_ARM[ansible_architecture] }}"
      X86_AARCH: "{{ X_ISA_MAP.X86_AARCH[ansible_architecture] }}"
      X64_ARM: "{{ X_ISA_MAP.X64_ARM[ansible_architecture] }}"
      X64_AARCH: "{{ X_ISA_MAP.X64_AARCH[ansible_architecture] }}"
      SSM: "{{ X_ISA_MAP.SSM[ansible_architecture] }}"
  tasks:
    - assert:
        that:
          ansible_user_id != "root"
        fail_msg: Do not run this playbook as root

    - name: System configuration
      become: true
      block:
        - name: Install prerequisites
          apt:
            name:
              - ca-certificates
              - apt-transport-https
              - gnupg
              - software-properties-common
            state: latest
            autoclean: true
            autoremove: true
            install_recommends: no
            cache_valid_time: "{{ X_APT_CACHE_VALID_TIME }}"
            update_cache: true

        - name: mkdir /etc/apt/keyrings
          tags: setup-apt-repositories
          file:
             state: directory
             mode: '0755'
             path: /etc/apt/keyrings

        - name: Install package sigining keys
          tags: setup-apt-repositories
          get_url:
            url: "{{ item.url }}"
            dest: "{{ item.dest }}"
            mode: "0644"
          with_items:
            - url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
              dest: /etc/apt/keyrings/nodesource-repo.asc
            - url: https://pkg.wslutiliti.es/public.key
              dest: /etc/apt/keyrings/wslu.asc
            - url: https://aquasecurity.github.io/trivy-repo/deb/public.key
              dest: /etc/apt/keyrings/trivy.asc
            - url: https://packages.adoptium.net/artifactory/api/gpg/key/public
              dest: /etc/apt/keyrings/adoptium.asc
            - url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
              dest: /etc/apt/keyrings/githubcli.gpg

        - name: Add APT repositories
          apt_repository:
            repo: "{{ item }}"
          tags: setup-apt-repositories
          with_items:
            - "deb [signed-by=/etc/apt/keyrings/nodesource-repo.asc] https://deb.nodesource.com/node_18.x nodistro main"
            - "deb [signed-by=/etc/apt/keyrings/wslu.asc] https://pkg.wslutiliti.es/debian {{ ansible_lsb.codename }} main"
            - "deb [signed-by=/etc/apt/keyrings/trivy.asc] https://aquasecurity.github.io/trivy-repo/deb {{ ansible_lsb.codename }} main"
            - "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb {{ ansible_lsb.codename }} main"
            - "deb [arch={{ X_ISA.AMD_ARM }} signed-by=/etc/apt/keyrings/githubcli.gpg] https://cli.github.com/packages stable main"

        - name: apt-cache update
          apt:
            install_recommends: no
            cache_valid_time: "{{ X_APT_CACHE_VALID_TIME }}"
            update_cache: true

        - name: apt-get install
          tags: apt-get-install
          apt:
            name:
              - bash-completion
              - bind9-dnsutils
              - build-essential
              - bundler
              - byobu
              - curl
              - default-mysql-client
              - default-libmysqlclient-dev
              - dwdiff
              - ffmpeg
              - gh
              - ghostscript
              - git
              - gpg-agent
              - imagemagick
              - info
              - jq
              - jsonnet
              - keychain
              - ldap-utils
              - libmariadb-dev
              - man
              - ncdu
              - nginx
              - pdftk
              - pkg-config
              - python3-bcrypt
              - python3-cryptography
              - python3-dev
              - python3-venv
              - ripgrep
              - redis-tools
              - ruby
              - ruby-dev
              - sqlite3
              - telnet
              - temurin-8-jdk
              - tree
              - trivy
              - unzip
              - vim
              - wslu
              - zip
            state: latest
            autoclean: true
            autoremove: true
            install_recommends: no
            update_cache: no

        - name: apt-get upgrade
          tags: apt-get-upgrade
          apt:
            upgrade: full
            autoclean: true
            autoremove: true
            install_recommends: no
            update_cache: no

        - name: dpkg -i
          tags: dpkg-i
          apt:
            deb: "{{ item }}"
          with_items:
            - "https://github.com/mozilla/sops/releases/download/v{{ X_SOPS_VERSION }}/sops_{{ X_SOPS_VERSION }}_{{ X_ISA.AMD_ARM }}.deb"
            # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html#ecs-exec-prerequisites
            - "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_{{ X_ISA.SSM }}/session-manager-plugin.deb"

        - name: Install binary distribution packages
          tags: install-bins
          include_role:
            name: "install"
            apply:
              tags: install-bins
          loop_control:
            loop_var: x_install
          with_items:
            - name: AWS CLI
              src: "https://awscli.amazonaws.com/awscli-exe-linux-{{ X_ISA.X86_AARCH }}.zip"
              archive_dest: /usr/local/src
              versioned_dest: /opt/awscli-installer
              dest: /opt/awscli-installer
              post_script_creates: /usr/local/bin/aws
              post_script: /opt/awscli-installer/aws/install --install-dir /opt/awscli
            - name: AWS SAM CLI
              src: "https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-{{ X_ISA.X86_ARM }}.zip"
              archive_dest: /usr/local/src
              versioned_dest: /opt/aws-sam-cli-installer
              dest: /opt/aws-sam-cli-installer
              post_script_creates: /usr/local/bin/sam
              post_script: /opt/aws-sam-cli-installer/install --install-dir /opt/aws-sam-cli
            - name: act
              src: "https://github.com/nektos/act/releases/download/v{{ X_ACT_VERSION }}/act_Linux_{{ X_ISA.X86_ARM }}.tar.gz"
              archive_dest: /usr/local/src
              versioned_dest: "/opt/act-{{ X_ACT_VERSION }}"
              dest: /opt/act
            - name: Golang
              src: "https://go.dev/dl/go{{ X_GO_VERSION }}.linux-{{ X_ISA.AMD_ARM }}.tar.gz"
              archive_dest: /usr/local/src
              versioned_dest: "/opt/go-{{ X_GO_VERSION }}"
              strip_components: true
              dest: /opt/go
            - name: Buildg
              src: "https://github.com/ktock/buildg/releases/download/v{{ X_BUILDG_VERSION }}/buildg-full-v{{ X_BUILDG_VERSION }}-linux-{{ X_ISA.AMD_ARM }}.tar.gz"
              archive_dest: /usr/local/src
              versioned_dest: "/opt/buildg-{{ X_BUILDG_VERSION }}"
              strip_components: true
              dest: /opt/buildg
            - name: Embulk
              src: https://dl.embulk.org/embulk-latest.jar
              versioned_dest: /opt/bin/embulk
              dest: /opt/bin/embulk
            - name: jp
              src: "https://github.com/jmespath/jp/releases/download/{{ X_JP_VERSION }}/jp-linux-{{ X_ISA.AMD_ARM }}"
              versioned_dest: "/opt/bin/jp-{{ X_JP_VERSION }}"
              dest: /opt/bin/jp
            - name: Terraform
              src: "https://releases.hashicorp.com/terraform/{{ X_TERRAFORM_VERSION }}/terraform_{{ X_TERRAFORM_VERSION }}_linux_{{ X_ISA.AMD_ARM }}.zip"
              archive_dest: /usr/local/src
              versioned_dest: "/opt/bin/terraform-{{ X_TERRAFORM_VERSION }}"
              dest: /opt/bin/terraform
            - name: Node.js
              src: "https://nodejs.org/dist/v{{ X_NODEJS_VERSION }}/node-v{{ X_NODEJS_VERSION }}-linux-{{ X_ISA.X64_ARM }}.tar.xz"
              archive_dest: /usr/local/src
              versioned_dest: "/opt/nodejs-{{ X_NODEJS_VERSION }}"
              strip_components: true
              dest: /opt/bin/nodejs
              post_script: >-
                find /opt/nodejs-{{ X_NODEJS_VERSION }} -lname '*.js' -exec readlink -f {} \; |
                xargs -n1 sed -i 's|^#!/usr/bin/env node$|#!/opt/nodejs-{{ X_NODEJS_VERSION }}/bin/node|1'

        - name: Setup certbot
          tags: setup-certbot
          import_role:
            name: "certbot"
          vars:
            x_certbot_extra_packages:
              - certbot-plugin-gandi
            x_certbot_extra_confs:
              - dest: /etc/letsencrypt/gandi/gandi.ini
                owner: root
                group: root
                mode: '0600'
                content: "dns_gandi_token={{ X_GANDI_PAT }}"
                # ignore_changes: true
            x_certbot_extra_args: >-
              --authenticator=dns-gandi
              --dns-gandi-credentials=/etc/letsencrypt/gandi/gandi.ini
            x_certbot_restart_services:
              - nginx
            x_certbot_domain: "*.{{ X_DOMAIN }}"
            x_certbot_email: "{{ X_CERTBOT_EMAIL }}"

        - name: Add a DDNS cronjob
          tags: add-ddns-cronjob
          cron:
            name: DDNS
            job: >-
              curl
              -X PUT
              -H 'Authorization: Bearer {{ X_GANDI_PAT }}'
              -H 'Content-Type: application/json'
              -d "{\"rrset_values\": [\"$(dig -4 +short myip.opendns.com @resolver1.opendns.com)\"], \"rrset_ttl\": 300}"
              'https://api.gandi.net/v5/livedns/domains/{{ ".".join(X_DOMAIN.rsplit(".", 2)[-2:]) }}/records/{{ X_DOMAIN.rsplit(".", 2)[0] }}/A'
              | logger -t ddns
            minute: "*/5"
            user: root

    - name: User configuration
      become: false
      block:
        - name: Generate an SSH keypair
          tags: generate-ssh-keypair
          import_role:
            name: "openssh_keypair"
          vars:
            x_openssh_keypair_path: "{{ X_OPENSSH_KEYPAIR_PATH }}"

        - name: ssh_config
          blockinfile:
            path: "{{ ansible_user_dir }}/.ssh/config"
            mode: "0644"
            create: true
            block: |
              ServerAliveInterval 10

        - name: bashrc
          blockinfile:
            path: "{{ ansible_user_dir }}/.bashrc"
            create: no
            block: |
              . {{ playbook_dir}}/.bashrc

        - name: vimrc
          blockinfile:
            path: "{{ ansible_user_dir }}/.vimrc"
            create: true
            marker: '" {mark} ANSIBLE MANAGED BLOCK'
            block: |
              source {{ playbook_dir}}/.vimrc

        - name: gitconfig
          tags: gitconfig
          community.general.ini_file:
            path: "{{ ansible_user_dir }}/.gitconfig"
            section: "{{ item.section }}"
            option: "{{ item.option }}"
            value: "{{ item.value }}"
          with_items:
            - section: user
              option: email
              value: yabatanien@murichazuke.com
            - section: user
              option: name
              value: YABATANIEN, Murichazuke
            - section: alias
              option: co
              value: checkout
            - section: alias
              option: ci
              value: commit
            - section: core
              option: excludesFile
              value: ~/.gitignore
            - section: diff
              option: wordRegex
              value: '[^[:space:],]+'

        - git:
            repo: https://github.com/kristijanhusak/vim-packager
            dest: "{{ ansible_user_dir }}/.vim/pack/packager/opt/vim-packager"
